package layout

import (
	"fmt"
	"math/rand"
	"strconv"
)

type tab struct {
	id      string
	title   string
	content templ.Component
	active  bool
}

type Tabs struct {
	id   string
	tabs []tab
}

func NewTabs() Tabs {
	randInt := rand.Intn(1000)
	return Tabs{
		id: strconv.Itoa(randInt),
	}
}

type tabOption func(*tab)

func SetTabActive() tabOption {
	return func(t *tab) {
		t.active = true
	}
}

func (t Tabs) AddTab(title string, content templ.Component, opts ...tabOption) Tabs {
	randInt := rand.Intn(1000)
	t.tabs = append(t.tabs, tab{
		id:      fmt.Sprintf("tabs-%s%v", t.id, randInt),
		title:   title,
		content: content,
	})

	for _, opt := range opts {
		opt(&t.tabs[len(t.tabs)-1])
	}
	return t
}

templ (t Tabs) R() {
	<div class="card">
		<div class="card-header">
			<ul class="nav nav-tabs card-header-tabs" data-bs-toggle="tabs" role="tablist">
				for _, tab := range t.tabs {
					<li class="nav-item" role="presentation">
						<a
							class={ "nav-link", templ.KV("active", tab.active) }
							data-bs-toggle="tab"
							if tab.active {
								aria-selected="true"
							} else {
								aria-selected="false"
							}
							role="tab"
							href={ templ.SafeURL("#" + tab.id) }
						>
							{ tab.title }
						</a>
					</li>
				}
			</ul>
		</div>
		<div class="card-body">
			<div class="tab-content">
				for _, tab := range t.tabs {
					<div class={ "tab-pane", templ.KV("active show", tab.active) } id={ tab.id } role="tabpanel">
						@tab.content
					</div>
				}
			</div>
		</div>
	</div>
}
